install.packages("LaplacesDemon")
5000 * (1 + .05)^3
5000 * (1 + .1)^3
7000 * (1 + .1)^3
7000 * (1 + .5)^3
7000 * (1 + .3)^3
7000 * (1 + .3)^2
10000 * (1 + .3)^2
library(batchtools)
library(data.table)
setwd("GreatLakes_mount")
# reg = makeExperimentRegistry(file.dir = "MR-MCEM/batchtools-MCEM3", work.dir = "/home/daniong", seed = 8686)
reg = loadRegistry(file.dir = "MR-MCEM/batchtools-modelsel", writeable=TRUE)
reg = makeExperimentRegistry(file.dir = "MR-MCEM/batchtools-modelsel", seed = 8686)
getStatus()
reg = loadRegistry(file.dir = "MR-MCEM/batchtools-modelsel", writeable=TRUE)
getStatus()
? reduceResultsDataTable
tmp = loadResult(1:1000)
tmp = loadResult(data.table(1:1000))
tmp = loadResult(id = data.table(job.id = 1:1000))
? loadResult
tmp = loadResult(data.table(1:1000))
tmp = loadResult(data.table(job.id = 1:1000))
loadResult(1)
data.table(job.id = 1:1000)
loadResult(id = data.table(job.id = 1:1000))
tmp = loadResult(findExperiments(prob.names = "simulate.data_K1"))
tmp = loadResult(findExperiments(prob.name = "simulate.data_K1"))
tmp = loadResult(id = findExperiments(prob.name = "simulate.data_K1"))
? identity
? reduceResultsDataTable
tmp = reduceResults(ids = data.table(job.id = 1:1000), fun = identity)
tmp = reduceResults(ids = findDone(), fun = identity)
tmp = reduceResults(ids = findDone())
tmp = reduceResults(ids = findDone(), fun = NULL)
tmp = reduceResultsDataTable(ids = findDone(), fun = NULL)
tmp
tmp$result
unlist(tmp$result)
unlist(tmp$result)[1:500]
mean(unlist(tmp$result)[1:500] == 1)
mean(unlist(tmp$result)[501:1000] == 2)
tmp
unlist(tmp$result)[501:1000]
# reg = makeExperimentRegistry(file.dir = "MR-MCEM/batchtools-modelsel", work.dir = "/home/daniong", seed = 8686)
reg = loadRegistry(file.dir = "MR-MCEM/batchtools-modelsel", writeable=TRUE)
library(batchtools)
library(data.table)
setwd("GreatLakes_mount")
# reg = makeExperimentRegistry(file.dir = "MR-MCEM/batchtools-modelsel", work.dir = "/home/daniong", seed = 8686)
reg = loadRegistry(file.dir = "MR-MCEM/batchtools-modelsel", writeable=TRUE)
getStatus()
setwd("~/GreatLakes_mount/MR-MCEM/ModelSelection")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
library(batchtools)
library(data.table)
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
getStatus()
# Obtain cluster membership predictions for each replication
res = reduceResultsDataTable(ids = findDone(), fun = NULL)
clusters = as.integer(gsub("simulate.data_K", "", getJobPars(findDone())$problem))
table(clusters, unlist(res$result))
? save
? saveRDS
? save
save(res, "res_mediumSNR.RData")
save(res, file = "res_mediumSNR.RData")
getJobPars(ids = findDone())
getJobPars(ids = findDone())$prob.pars
? getJobPars
getJobTable(findDone())
setwd("~/GreatLakes_mount/MR-MCEM/ModelSelection")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
getStatus()
tmp = getJobPars(findDone())
tmp
tmp = unwrap(getJobPars(findDone()))
tmp
? findExperiments
medSNR_ids = findExperiments(prob.pars = (sqrt.p_lambdaX == 5))
medSNR_ids
highSNR_ids = findExperiments(prob.pars = (sqrt.p_lambdaX == 10))
highSNR_ids
medSNR_ids = findExperiments(prob.pars = (sqrt.p_lambdaX == 5))
highSNR_ids = findExperiments(prob.pars = (sqrt.p_lambdaX == 10))
# Obtain cluster membership predictions for each replication
res_medSNR = reduceResultsDataTable(ids = findDone(medSNR_ids), fun = NULL)
clusters_medSNR = as.integer(gsub("simulate.data_K", "", getJobPars(findDone(medSNR_ids))$problem))
table(clusters_medSNR, unlist(res_medSNR$result))
save(res, file = "res_mediumSNR.RData")
res_highSNR = reduceResultsDataTable(ids = findDone(highSNR_ids), fun = NULL)
clusters_highSNR = as.integer(gsub("simulate.data_K", "", getJobPars(findDone(highSNR_ids))$problem))
table(clusters_highSNR, unlist(res_highSNR$result))
save(res, file = "res_highSNR.RData")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
res <- readRDS("~/GreatLakes_mount/MR-MCEM/ModelSelection/res.RDS")
res
pars = unwrap(getJobPars(findDone()))
library(batchtools)
library(data.table)
library(dplyr)
setwd("~/GreatLakes_mount/MR-MCEM/ModelSelection")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
pars = unwrap(getJobPars(findDone()))
source('~/GreatLakes_mount/MR-MCEM/ModelSelection/process-batchtools-modelsel.R', echo=TRUE)
pars = unwrap(getJobPars(findDone()))
pars
? mutate
tab = ijoin(pars, res) %>% mutate(cluster = as.integer(gsub("simulate.data_K", "", problem)))
tab
? group_by
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
group_by(p, sqrt.p_lambdaX)
tab
? remove
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
%>% select(-c(problem, algorithm, pis, mus, sds)) %>%
group_by(p, sqrt.p_lambdaX)
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
%>% select(-c(problem, algorithm, pis, mus, sds))
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
%>% select(-c(problem, algorithm, pis, mus, sds))
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
pars = unwrap(getJobPars(findDone()))
pars = unwrap(getJobPars(findDone()))
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
%>% select(-c(problem, algorithm, pis, mus, sds))
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem)))
tab
tab %>% select(p, sqrt.p_lambdaX, result, cluster)
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
select(p, sqrt.p_lambdaX, result, cluster) %>%
group_by(p, sqrt.p_lambdaX)
tab
find.package("MR.MCEM")
.libPaths()
.libPaths()
.libPaths()
rstan:::rstudio_stanc("Dropbox/MR_Bayes/MR-MCEM/MR_sampling.stan")
library(Rcpp)
install.packages(c("loo", "Rcpp", "RcppArmadillo", "rstan"))
installed.packages()
##### Load MR_EM function
# sourceCpp("MR.MCEM/src/MR_EM.cpp")
library(MR.MCEM)
install.packages("devtools")
update.packages()
? update.packages
update.packages(checkBuilt = TRUE)
update.packages(checkBuilt = TRUE)
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
version
packageStatus()
devtools::install_github("danieliong/MR.MCEM")
? unlink
unlink("~/.R/Makevars")
unlink("~/.Renviron")
sessionInfo()
library(batchtools)
library(data.table)
library(dplyr)
setwd("~/GreatLakes_mount/MR-MCEM/ModelSelection")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
res = readRDS("res_BIC.RDS")
res_BIC = readRDS("res_BIC.RDS")
res_BIC
unwrap(res_BIC)
unwrap(res_BIC)$Q
unwrap(res_BIC)$Q[[1]]
? findExpired
tab_BIC <- readRDS("~/Dropbox/MR_Bayes/paper_results/tab_BIC.RDS")
tab_BIC
flare_pairs_specs <- read.csv("/Volumes/GoogleDrive/My Drive/Research/SpaceWeather/flare_pairs_specs.csv")
View(flare_pairs_specs)
library(mr.raps)
? mr.raps
? mr.raps.scatterplot
### mr.raps fit
mr.raps_fit = mr.raps(data)
mr.raps.scatterplot(data, annotate = FALSE, num.snps = nrow(data))
#### Model selection
mod_select = selectModel_BIC(X, Y, seX, seY, K_range = 1:3)
##### Run MC-EM algorithm
# K = mod_select$K_opt
K = 2 # number of clusters
## Choose initial values that maximizes likelihood
Nrep = 30
initVals = optimizeInitVals(K, X, Y, seX, seY, Nreps = Nrep, verbose=TRUE, overDispersedY = FALSE)
## Run MC-EM with optimized initial values
MCEM_fit <- MR_EM(K, initVals, X, Y, seX, seY, overDispersedY = FALSE, saveTraj = TRUE, verbose = TRUE)
##### Create plots
# setwd("paper_results/plots")
setwd("paper/plots")
mr.raps_scatter = MREM.scatterplot(data,
exposure_name = "HDL-C",
outcome_name = "CHD")
p_build <- ggplot_build(mr.raps_scatter)
x_grid = seq(0, p_build$layout$panel_params[[1]]$x.range[2], .001)
lines_dat <- data.frame(x = x_grid)
lines_dat$y = mr.raps_fit$beta.hat * x_grid
lines_dat$ymin = (mr.raps_fit$beta.hat - mr.raps_fit$beta.se) * x_grid
lines_dat$ymax = (mr.raps_fit$beta.hat + mr.raps_fit$beta.se) * x_grid
mr.raps_scatter = mr.raps_scatter +
geom_line(data = lines_dat, aes(x = x, y = y, color = "#E41A1C"),
linetype = 1, size = .8, inherit.aes = FALSE) +
geom_ribbon(data = lines_dat,  aes(x = x, ymin = ymin, ymax = ymax),
alpha = 0.4, fill = "#E41A1C", inherit.aes = FALSE) +
theme(legend.position = "none")
mr.raps_scatter
ggsave("mrraps_hdlcad_scatter.pdf", plot=mr.raps_scatter)
hdlcad_scatter = MREM.scatterplot(data, MCEM_fit,
exposure_name = "HDL-C",
outcome_name = "CHD")
hdlcad_scatter
ggsave("hdlcad_scatter.pdf", plot = hdlcad_scatter)
hdlcad_bar = MREM.barplot(data, MCEM_fit, ret.snps = TRUE)
hdlcad_bar
ggsave("hdlcad_bar.pdf", plot = hdlcad_bar[[1]])
########## Resampling data + Model selection
p_resamp = 500
resamp_ind = sample(1:length(X), size = p_resamp, replace = TRUE)
X_resamp = X[resamp_ind]
seX_resamp = seX[resamp_ind]
Y_resamp = Y[resamp_ind]
seY_resamp = seY[resamp_ind]
mod_select_resamp = selectModel_BIC(X_resamp, Y_resamp,
seX_resamp, seY_resamp,
K_range = 1:3)
################################################################################
## Temporary code (please ask QZ before delete)
ordered.SNPs <- hdlcad_bar[[2]]
newdata <- combined.data[SNP %in% ordered.SNPs]
newdata$SNP <- factor(newdata$SNP, ordered.SNPs)
newdata <- newdata[order(SNP)]
tmp <- colnames(newdata)
beta_cols <- tmp[grep("beta", tmp)]
se_cols <- tmp[grep("se", tmp)]
tval <- data.matrix(newdata[, ..beta_cols] / newdata[, ..se_cols]) *
as.vector(data.matrix(sign(newdata[, "beta_hdl_c_kettunen"])))
tval <- pmin(tval, 7)
tval <- pmax(tval, - 7)
library(data.table)
tval <- data.table(tval)
colnames(tval) <- gsub("beta_", "", colnames(tval))
kettunen_cols <- colnames(tval)[grep("kettunen", colnames(tval))]
tval <- tval[, ..kettunen_cols]
colnames(tval) <- gsub("_kettunen", "", colnames(tval))
tval$SNP <- newdata$SNP
library(reshape2)
tval_long <- melt(tval, id.vars = "SNP")
tval_long$SNP <- factor(tval_long$SNP, tval$SNP)
## Order the lipid measurements
load("Data/trait_index.rda")
tval_long$variable <- gsub("_", ".", toupper(tval_long$variable))
trait.index$trait <- toupper(trait.index$trait)
tval_long <- merge(tval_long, trait.index[, c("trait", "lipid", "size")], by.x = "variable", by.y = "trait")
tval_long$variable <- factor(tval_long$variable, rev(trait.index$trait))
levels(tval_long$variable) <- gsub("\\.", "-", levels(tval_long$variable))
sign.square <- trans_new("sign.square", function(x) sign(x) * abs(x)^2.5, function(x) sign(x) * (abs(x))^(1/2.5))
heatmap <- ggplot(tval_long) + aes(x = SNP, y = variable, fill = value) + geom_tile() + scale_fill_gradient2(breaks = c(-7, -5, -3, 0, 3, 5, 7), ## trans = sign.square,
name = "z-score", guide = guide_colorbar(barwidth = 20)) + theme_classic(base_size = 15) + theme(axis.text.x = element_text(angle = 90), legend.position = "top") + xlab("") + ylab("")
heatmap
ggsave(heatmap, file = "paper/plots/hdl_cad_heatmap.pdf", width = 10, height = 14)
###############################################################
# Alternative model fitting
# Re-install package to get alternative model implementation/scatterplot
devtools::install_github("danieliong/MR.MCEM")
library(MR.MCEM)
mod_select = selectModelBIC(data, altModel = TRUE)
bestK = mod_select$bestK # K = 2
alt_fit = mod_select$bestFit
MREMalt.scatterplot(data, EM_fit = alt_fit, interactive = FALSE) ### ggplot
MREMalt.scatterplot(data, EM_fit = alt_fit, interactive = TRUE) ### interactive plotly
setwd("~/Dropbox/MR_Bayes/")
## Download MR MCEM package
## library(devtools)
## install_github("danieliong/MR.MCEM")
## install.packages("MR.MCEM_1.0.tar.gz", repos = NULL)
## Load libraries
library(Rcpp)
library(RcppArmadillo)
library(RcppDist)
library(mr.raps)
library(dplyr)
library(ggplot2)
library(plotly)
library(reshape2)
library(rsnps)
library(MR.MCEM)
## library(devtools)
## load_all("./MR-MCEM/MR.MCEM")
## ## Load data
## source("add_ivw.R")
load("Data/MRDataChallenge2019_qz.rda")
data = as.data.frame(combined.data[, c("SNP", "pval_hdl_teslovich",
"beta_hdl_c_kettunen", "se_hdl_c_kettunen",
"beta_cad", "se_cad")])
names(data) = c("SNP", "pval.selection",
"beta.exposure", "se.exposure",
"beta.outcome", "se.outcome")
data = subset(data, pval.selection < 5e-8)
data$beta.outcome = data$beta.outcome * sign(data$beta.exposure)
data$beta.exposure = abs(data$beta.exposure)
X = data[,"beta.exposure"]
Y = data[,"beta.outcome"]
seX = data[,"se.exposure"]
seY = data[,"se.outcome"]
data
head(data)
data$SNP
tmp = data[,-1]
tmp
tmp$SNP
is.null(tmp$SNP)
# K = mod_select$K_opt
K = 2 # number of clusters
## Choose initial values that maximizes likelihood
Nrep = 30
initVals = optimizeInitVals(K, X, Y, seX, seY, Nreps = Nrep, verbose=TRUE, overDispersedY = FALSE)
sourceCpp("MR-MCEM/MR.MCEM/src/getImportanceSamples.cpp")
sourceCpp("~/Dropbox/MR_Bayes/MR-MCEM/MR.MCEM/src/getImportanceSamples.cpp")
setwd("~/Dropbox/MR_Bayes/")
sourceCpp("MR-MCEM/MR.MCEM/src/getImportanceSamples.cpp")
sourceCpp("MR-MCEM/MR.MCEM/src/getImportanceSamples.cpp")
setwd("~/Dropbox/MR_Bayes/MR-MCEM")
library(Rcpp)
Rcpp.package.skeleton("testPackage")
setwd("MR.MCEM")
usethis::use_gpl3_license("Daniel Iong")
compileAttributes(verbose=TRUE)
devtools::load_all()
devtools::load_all()
sourceCpp("MR-MCEM/MR.MCEM/src/getImportanceSamples.cpp")
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
setwd("~/Dropbox/MR_Bayes/")
sourceCpp("MR-MCEM/MR.MCEM/src/getImportanceSamples.cpp")
setwd("~/Dropbox/MR_Bayes/MR-MCEM")
setwd("..")
install.packages("MR.MCEM_1.0.tar.gz", repos = NULL)
library(MR.MCEM)
impt_samples = getImportanceSamples(50000, data, MCEM_fit)
## Run MC-EM with optimized initial values
MCEM_fit <- MR_EM(K, initVals, X, Y, seX, seY, overDispersedY = FALSE, saveTraj = TRUE, verbose = TRUE)
impt_samples = getImportanceSamples(50000, data, MCEM_fit)
sampleBetas(data, MCEM_fit)
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
sampleBetas(data, MCEM_fit)
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
sampleBetas(data, MCEM_fit)
sampleBetas(50000, data, MCEM_fit)
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
sampleBetas(data, MCEM_fit)
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
sampleBetas(data, MCEM_fit)
warnings()
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
tmp = sampleBetas(data, MCEM_fit)
dim(tmp)
tmp = computeClusterMembProb(data, MCEM_fit)
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
tmp = computeClusterMembProb(data, MCEM_fit)
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
tmp = computeClusterMembProb(data, MCEM_fit)
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
tmp = computeClusterMembProb(data, MCEM_fit)
source("MR-MCEM/MR.MCEM/R/sampleLatentVars.R")
tmp = computeClusterMembProb(data, MCEM_fit)
tmp
? mr.raps
? mr.raps
? lm
? mr.raps
? lm
? mr.raps
setwd("~/Dropbox/MR_Bayes/MR-MCEM")
? mr.raps.scatterplot
setwd("~/Dropbox/MR_Bayes")
? mr.raps.scatterplot
setwd("~")
? mr.raps.scatterplot
library(mr.raps)
? mr.raps.scatterplot
library(devtools)
install_github("danieliong/MRPATH")
? install_github
install_github("danieliong/MRPATH", upgrade = FALSE)
install_github("danieliong/MRPATH", upgrade = FALSE)
install_github("danieliong/MRPATH", upgrade = FALSE)
install_github("danieliong/MRPATH", upgrade = FALSE)
install_github("danieliong/MRPATH")
install_github("danieliong/MRPATH")
install_github("danieliong/MRPATH")
install_github("danieliong/MRPATH")
install_github("danieliong/MRPATH")
install_github("danieliong/MRPATH")
library(RcppDist)
library(RcppDist)
install_github("danieliong/MRPATH")
install_github("danieliong/MRPATH")
setwd("~/Dropbox/MR_Bayes/MR-MCEM")
library(Rcpp)
setwd("MRPATH")
setwd("~/Dropbox/MR_Bayes")
library(Rcpp)
setwd("MRPATH")
usethis::use_gpl3_license("Daniel Iong")
compileAttributes(verbose=TRUE)
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
setwd("~/Dropbox/MR_Bayes")
setwd("~/Dropbox/MR_Bayes")
library(Rcpp)
setwd("MRPATH")
usethis::use_gpl3_license("Daniel Iong")
compileAttributes(verbose=TRUE)
devtools::load_all()
library(devtools)
install_github("danieliong/MRPATH")
install_github("danieliong/MRPATH", upgrade = FALSE)
install_github("danieliong/MRPATH", upgrade = FALSE)
