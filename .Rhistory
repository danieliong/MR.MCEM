install.packages("LaplacesDemon")
5000 * (1 + .05)^3
5000 * (1 + .1)^3
7000 * (1 + .1)^3
7000 * (1 + .5)^3
7000 * (1 + .3)^3
7000 * (1 + .3)^2
10000 * (1 + .3)^2
library(batchtools)
library(data.table)
setwd("GreatLakes_mount")
# reg = makeExperimentRegistry(file.dir = "MR-MCEM/batchtools-MCEM3", work.dir = "/home/daniong", seed = 8686)
reg = loadRegistry(file.dir = "MR-MCEM/batchtools-modelsel", writeable=TRUE)
reg = makeExperimentRegistry(file.dir = "MR-MCEM/batchtools-modelsel", seed = 8686)
getStatus()
reg = loadRegistry(file.dir = "MR-MCEM/batchtools-modelsel", writeable=TRUE)
getStatus()
? reduceResultsDataTable
tmp = loadResult(1:1000)
tmp = loadResult(data.table(1:1000))
tmp = loadResult(id = data.table(job.id = 1:1000))
? loadResult
tmp = loadResult(data.table(1:1000))
tmp = loadResult(data.table(job.id = 1:1000))
loadResult(1)
data.table(job.id = 1:1000)
loadResult(id = data.table(job.id = 1:1000))
tmp = loadResult(findExperiments(prob.names = "simulate.data_K1"))
tmp = loadResult(findExperiments(prob.name = "simulate.data_K1"))
tmp = loadResult(id = findExperiments(prob.name = "simulate.data_K1"))
? identity
? reduceResultsDataTable
tmp = reduceResults(ids = data.table(job.id = 1:1000), fun = identity)
tmp = reduceResults(ids = findDone(), fun = identity)
tmp = reduceResults(ids = findDone())
tmp = reduceResults(ids = findDone(), fun = NULL)
tmp = reduceResultsDataTable(ids = findDone(), fun = NULL)
tmp
tmp$result
unlist(tmp$result)
unlist(tmp$result)[1:500]
mean(unlist(tmp$result)[1:500] == 1)
mean(unlist(tmp$result)[501:1000] == 2)
tmp
unlist(tmp$result)[501:1000]
# reg = makeExperimentRegistry(file.dir = "MR-MCEM/batchtools-modelsel", work.dir = "/home/daniong", seed = 8686)
reg = loadRegistry(file.dir = "MR-MCEM/batchtools-modelsel", writeable=TRUE)
library(batchtools)
library(data.table)
setwd("GreatLakes_mount")
# reg = makeExperimentRegistry(file.dir = "MR-MCEM/batchtools-modelsel", work.dir = "/home/daniong", seed = 8686)
reg = loadRegistry(file.dir = "MR-MCEM/batchtools-modelsel", writeable=TRUE)
getStatus()
setwd("~/GreatLakes_mount/MR-MCEM/ModelSelection")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
library(batchtools)
library(data.table)
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
getStatus()
# Obtain cluster membership predictions for each replication
res = reduceResultsDataTable(ids = findDone(), fun = NULL)
clusters = as.integer(gsub("simulate.data_K", "", getJobPars(findDone())$problem))
table(clusters, unlist(res$result))
? save
? saveRDS
? save
save(res, "res_mediumSNR.RData")
save(res, file = "res_mediumSNR.RData")
getJobPars(ids = findDone())
getJobPars(ids = findDone())$prob.pars
? getJobPars
getJobTable(findDone())
setwd("~/GreatLakes_mount/MR-MCEM/ModelSelection")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
getStatus()
tmp = getJobPars(findDone())
tmp
tmp = unwrap(getJobPars(findDone()))
tmp
? findExperiments
medSNR_ids = findExperiments(prob.pars = (sqrt.p_lambdaX == 5))
medSNR_ids
highSNR_ids = findExperiments(prob.pars = (sqrt.p_lambdaX == 10))
highSNR_ids
medSNR_ids = findExperiments(prob.pars = (sqrt.p_lambdaX == 5))
highSNR_ids = findExperiments(prob.pars = (sqrt.p_lambdaX == 10))
# Obtain cluster membership predictions for each replication
res_medSNR = reduceResultsDataTable(ids = findDone(medSNR_ids), fun = NULL)
clusters_medSNR = as.integer(gsub("simulate.data_K", "", getJobPars(findDone(medSNR_ids))$problem))
table(clusters_medSNR, unlist(res_medSNR$result))
save(res, file = "res_mediumSNR.RData")
res_highSNR = reduceResultsDataTable(ids = findDone(highSNR_ids), fun = NULL)
clusters_highSNR = as.integer(gsub("simulate.data_K", "", getJobPars(findDone(highSNR_ids))$problem))
table(clusters_highSNR, unlist(res_highSNR$result))
save(res, file = "res_highSNR.RData")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
res <- readRDS("~/GreatLakes_mount/MR-MCEM/ModelSelection/res.RDS")
res
pars = unwrap(getJobPars(findDone()))
library(batchtools)
library(data.table)
library(dplyr)
setwd("~/GreatLakes_mount/MR-MCEM/ModelSelection")
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
pars = unwrap(getJobPars(findDone()))
source('~/GreatLakes_mount/MR-MCEM/ModelSelection/process-batchtools-modelsel.R', echo=TRUE)
pars = unwrap(getJobPars(findDone()))
pars
? mutate
tab = ijoin(pars, res) %>% mutate(cluster = as.integer(gsub("simulate.data_K", "", problem)))
tab
? group_by
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
group_by(p, sqrt.p_lambdaX)
tab
? remove
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
%>% select(-c(problem, algorithm, pis, mus, sds)) %>%
group_by(p, sqrt.p_lambdaX)
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
%>% select(-c(problem, algorithm, pis, mus, sds))
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
%>% select(-c(problem, algorithm, pis, mus, sds))
reg = loadRegistry(file.dir = "batchtools-modelsel", writeable=TRUE)
pars = unwrap(getJobPars(findDone()))
pars = unwrap(getJobPars(findDone()))
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
%>% select(-c(problem, algorithm, pis, mus, sds))
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem)))
tab
tab %>% select(p, sqrt.p_lambdaX, result, cluster)
tab = ijoin(pars, res) %>%
mutate(cluster = as.integer(gsub("simulate.data_K", "", problem))) %>%
select(p, sqrt.p_lambdaX, result, cluster) %>%
group_by(p, sqrt.p_lambdaX)
tab
find.package("MR.MCEM")
.libPaths()
.libPaths()
.libPaths()
rstan:::rstudio_stanc("Dropbox/MR_Bayes/MR-MCEM/MR_sampling.stan")
library(Rcpp)
install.packages(c("loo", "Rcpp", "RcppArmadillo", "rstan"))
installed.packages()
##### Load MR_EM function
# sourceCpp("MR.MCEM/src/MR_EM.cpp")
library(MR.MCEM)
install.packages("devtools")
update.packages()
? update.packages
update.packages(checkBuilt = TRUE)
update.packages(checkBuilt = TRUE)
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
version
packageStatus()
devtools::install_github("danieliong/MR.MCEM")
setwd("~/Research/MR_Bayes/MR-MCEM")
setwd("~/Dropbox/MR_Bayes/MR-MCEM")
library(Rcpp)
# Rcpp.package.skeleton("MR.MCEM")
setwd("MR.MCEM")
usethis::use_gpl3_license("Daniel Iong")
compileAttributes(verbose=TRUE)
devtools::load_all()
